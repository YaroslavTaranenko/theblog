{
  "name": "angular-upload",
  "version": "1.0.13",
  "description": "AngularJS Upload, Handle your uploading with style",
  "main": "angular-upload.js",
  "scripts": {
    "test": "grunt travis --verbose"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com/leon/angular-upload.git"
  },
  "keywords": [
    "angular",
    "upload",
    "files",
    "iframe",
    "fileupload",
    "directive"
  ],
  "author": {
    "name": "Leon Radley",
    "email": "leon@radley.se"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/leon/angular-upload/issues"
  },
  "devDependencies": {
    "matchdep": "~0.3.0",
    "grunt": "~0.4.1",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-watch": "~0.5.1",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-contrib-concat": "~0.3.0",
    "grunt-contrib-uglify": "~0.3.1",
    "grunt-contrib-less": "~0.9.0",
    "grunt-ngmin": "~0.0.3",
    "grunt-bump": "0.0.13",
    "karma": "~0.10.5",
    "grunt-karma": "~0.6.2",
    "karma-phantomjs-launcher": "~0.1.0",
    "karma-chrome-launcher": "~0.1.0",
    "karma-ie-launcher": "~0.1.1",
    "karma-growl-reporter": "~0.1.1",
    "protractor": "~0.16.1",
    "grunt-express": "~1.2.1",
    "express": "~3.4.8",
    "ejs": "~0.8.4"
  },
  "dependencies": {
    "angular": ">=1.2.0"
  },
  "readme": "# Angular Upload\nUpload files using FormData, fall back to iframe upload when FormData isn't supported\n\n - Works in all browsers\n - Lightweight\n - No dependency on jQuery\n\n## Example\n```html\n<div\n  class=\"btn btn-primary btn-upload\"\n  upload-button\n  url=\"/upload\"\n  on-success=\"onSuccess(response)\"\n>Upload</div>\n```\n\n## Install\nInstall via bower\n```sh\nbower install --save angular-upload\n```\n\nAdd the module to your app dependencies and include it in your page\n```js\nangular.module('app', [\n  'lr.upload'\n]);\n```\n```html\n<script src='bower_components/angular-upload/angular-upload.min.js'></script>\n```\n\nand to your less/css if you want the upload button\n\n```css\n@import \"bower_components/angular-upload/src/directives/btnUpload.less\"; /* or .min.css */\n```\n\nAnd you are good to go!\n\n## Documentation over parameters\n\n### Upload button\nThe upload button masks the normal file input and makes it look like a button\n\n```html\n<div\n  class=\"btn btn-primary btn-upload\"\n  upload-button\n\n  // Mandatory, the url of the backend that is going to handle the upload\n  url=\"/upload\"\n\n  // Optional, file param name for upload\n  param=\"file\"\n\n  // Optional, object to send as form data with the upload\n  data=\"formData\"\n\n  // Optional, comma separated list or array of allowed mimetypes, defaults to allowing all types\n  accept=\"{{acceptTypes}}\"\n\n  // Optional, Allow selecting multiple files, defaults to false\n  multiple=\"{{allowMultiple}}\"\n\n  // Optional, force all uploads through the iframe solution, defaults to false and should normally not be included\n  force-iframe-upload=\"{{forceIframeUpload}}\"\n\n  // Optional, make file input required and add ng-invalid-required if required is set to true on the input button\n  required=\"true|false\"\n\n  on-upload=\"onUpload(files)\" // Optional callback when uploading starts\n  on-success=\"onSuccess(response)\" // Optional callback\n  on-error=\"onError(response)\" // Optional callback\n  on-complete=\"onComplete(response)\" // Optional, callback (called on both on-success and on-error)\n\n>Fileupload</div>\n```\n\n## Advanced documentation\nThe upload service that is used behind the scenes in the upload button, can be used in a controller by injecting `upload`\n\n```html\n<body ng-app=\"app\" ng-controller=\"AppCtrl\">\n    <input name=\"myFile\" type=\"file\" />\n</body>\n```\n\n```js\nangular.module('app').controller('AppCtrl', function ($scope, upload) {\n  $scope.doUpload = function () {\n    upload({\n      url: '/upload',\n      method: 'POST',\n      data: {\n        anint: 123,\n        aBlob: Blob([1,2,3]), // Only works in newer browsers\n        aFile: $scope.myFile, // a jqLite type=\"file\" element, upload() will extract all the files from the input and put them into the FormData object before sending.\n      }\n    }).then(\n      function (response) {\n        console.log(response.data); // will output whatever you choose to return from the server on a successful upload\n      },\n      function (response) {\n          console.error(response); //  Will return if status code is above 200 and lower than 300, same as $http\n      }\n    );\n  }\n});\n```\n\n## Build it yourself!\nangular-upload is built with grunt and has a express backend for testing.\n\nStart by installing npm if you don't have it already\n\nvia homebrew or homepage (http://nodejs.org/download/)\n```sh\nbrew install nodejs\n```\nthen\n```sh\nnpm install -g grunt-cli karma-cli\n```\nthen from within angular-upload\n```sh\nnpm install && bower install\n```\nthen you can start the testserver up with\n```sh\ngrunt webserver\n```\n\nand you can access it through http://localhost:9001 and test the uploader\n\nTo run the tests\n```sh\ngrunt test\n```\n\nor run in autotest mode\n\n```sh\ngrunt autotest\n```\n\nAnd when you're done minify it\n```sh\ngrunt package\n```\n",
  "readmeFilename": "README.md",
  "_id": "angular-upload@1.0.13",
  "dist": {
    "shasum": "10735361c861e5c25217a854a1abc9611095580d"
  },
  "_from": "angular-upload@",
  "_resolved": "https://registry.npmjs.org/angular-upload/-/angular-upload-1.0.13.tgz"
}
